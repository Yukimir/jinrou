/**
 * Webpack config script
 *
 * inputs as environment variables:
 * NODE_ENV: 'production' if production build
 * MEASURE: truthy if build time should be measured
 * LEGACY: 'only' if build only legacy build, 'off' if no legacy build
 */

// Register CoffeeScript for reading config from app.config.
require('coffee-script/register');

const path = require('path');
const webpack = require('webpack');
const ManifestPlugin = require('webpack-manifest-plugin');
const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const SpeedMeasurePlugin = require('speed-measure-webpack-plugin');

/**
 * Priority of chunks.
 */
const Priority = {
  lib: 10,
  page: 50,
  vendor: 100,
};

// config values ----------
// system language.
let systemLanguage;
// publicPath.
let publicPath;
// whether to use legacy builds.
let legacyBuilds;
try {
  const config = require('../config/app.coffee');

  systemLanguage = config.language.value;
  publicPath = config.front.publicPath;
  legacyBuilds = config.front.legacyBuilds;
} catch (e) {
  console.error(
    `Error: '../config/app.coffee' does not exist. Prepare configuration file before building.`,
  );

  throw e;
}

const makeConfig = (isProduction, isLegacyBuild) => ({
  mode: isProduction ? 'production' : 'development',
  devtool: isProduction ? undefined : 'eval-source-map',
  entry: './dist-esm/index.js',
  output: {
    library: 'JinrouFront',
    path: !isLegacyBuild
      ? path.join(__dirname, '..', 'client/static/front-assets/')
      : path.join(__dirname, '..', 'client/static/front-assets/legacy/'),
    publicPath: !isLegacyBuild ? publicPath : addPathSeg(publicPath, 'legacy'),
    crossOriginLoading: 'anonymous',
    // for production, include hash information.
    filename: isProduction ? 'bundle.[chunkhash].js' : 'bundle.js',
    chunkFilename: '[name].[chunkhash].bundle.js',
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        rules: [
          {
            exclude: /node_modules/,
            use: ['source-map-loader'],
            enforce: 'pre',
          },
        ].concat(
          isLegacyBuild
            ? [
                {
                  loader: 'babel-loader',
                  options: {
                    cacheDirectory: true,
                    plugins: ['@babel/plugin-syntax-dynamic-import'],
                    presets: [
                      [
                        '@babel/preset-env',
                        {
                          targets: {
                            browsers: ['IE 11', 'ios 5'],
                          },
                          useBuiltIns: 'entry',
                          forceAllTransforms: true,
                          modules: false,
                        },
                      ],
                    ],
                  },
                },
              ]
            : [],
        ),
      },
      {
        test: /\.yaml$/,
        use: ['json-loader', 'yaml-loader'],
      },
      {
        test: /\.(?:pug|jade)$/,
        use: ['pug-loader'],
      },
    ],
  },
  plugins: [
    new webpack.DefinePlugin({
      EXTERNAL_SYSTEM_LANGUAGE: JSON.stringify(systemLanguage),
    }),
    new BundleAnalyzerPlugin({
      analyzerMode: isProduction ? 'static' : 'server',
      openAnalyzer: !isProduction,
    }),
    new CopyWebpackPlugin([
      {
        from: 'build/feature-check.js',
        to: 'feature-check.[hash].js',
      },
    ]),
    new ManifestPlugin({
      // https://github.com/danethurber/webpack-manifest-plugin/issues/144
      seed: {},
      map: file => {
        // remove hash from file name generated by CopyWebpackPlugin.
        if (/^feature-check\..*\.js$/.test(file.name)) {
          file.name = 'feature-check.js';
        }
        return file;
      },
    }),
    isProduction ? new webpack.HashedModuleIdsPlugin() : null,
  ].filter(plug => plug != null),
  resolve: {
    alias: {
      // if not legacy Mode, remove polyfills.
      '@babel/polyfill': isLegacyBuild
        ? '@babel/polyfill'
        : path.join(__dirname, 'build/empty.js'),
      _polyfills: isLegacyBuild
        ? path.join(__dirname, 'dist-esm/polyfills/index.js')
        : path.join(__dirname, 'build/empty.js'),
    },
  },
  optimization: {
    moduleIds: 'named',
    splitChunks: {
      maxAsyncRequests: 16,
      cacheGroups: {
        dialog: {
          test: /[\\\/]dist-esm[\\\/]dialog[\\\/]/,
          name: 'dialog',
          chunks: 'all',
          priority: Priority.lib,
        },
        page_game_view: {
          test: /[\\\/]dist-esm[\\\/]pages[\\\/]game-view[\\\/]/,
          name: 'game-view',
          chunks: 'all',
          priority: Priority.page,
        },
        page_game_start_control: {
          test: /[\\\/]dist-esm[\\\/]pages[\\\/]game-start-control[\\\/]/,
          name: 'game-start-control',
          chunks: 'all',
          priority: Priority.page,
        },
        page_user_settings: {
          test: /[\\\/]dist-esm[\\\/]pages[\\\/]user-settings[\\\/]/,
          name: 'user-settings',
          chunks: 'all',
          priority: Priority.page,
        },
        vendor_react: {
          // react family and its dependencies.
          test: vendorRegexp(
            'react',
            'react-dom',
            'scheduler',
            'react-transition-group',
            'react-lifecycles-compat',
            'styled-components',
            'recompose',
            'stylis',
            'fbjs',
            'react-is',
            'object-assign',
            'prop-types',
            'stylis-rule-sheet',
            'hoist-non-react-statics',
            'color',
            'color-convert',
            'color-name',
            'color-string',
          ),
          name: 'vendor_react',
          chunks: 'all',
          priority: Priority.vendor,
        },
        vendor_react_draggable: {
          test: /[\\\/]node_modules[\\\/]react-draggable[\\\/]/,
          name: 'vendor_react_draggable',
          chunks: 'all',
          priority: Priority.vendor,
        },
        vendor_mobx: {
          test: /[\\\/]node_modules[\\\/]mobx[\\\/]/,
          name: 'vendor_mobx',
          chunks: 'all',
          priority: Priority.vendor,
        },
        vendor_mobx_react: {
          test: /[\\\/]node_modules[\\\/]mobx-react[\\\/]/,
          name: 'vendor_mobx_react',
          chunks: 'all',
          priority: Priority.vendor,
        },
        vendor_i18next: {
          test: /[\\\/]node_modules[\\\/]i18next(?:-xhr-backend)?[\\\/]/,
          name: 'vendor_i18next',
          chunks: 'all',
          priority: Priority.vendor,
        },
        vendor_for_settings: {
          test: /[\\\/]node_modules[\\\/](?:react-color|dexie|lodash)[\\\/]/,
          name: 'vendor_for_settings',
          chunks: 'all',
          priority: Priority.vendor,
        },
        /*
        vendors: {
          test: /[\\\/]node_modules[\\\/]/,
          minChunks: 2,
          reuseExistingChunk: true,
          chunks: 'all',
        },
        */
      },
    },
  },
});

const isProduction = process.env.NODE_ENV === 'production';

// Config for main build.
const mainConfig = makeConfig(isProduction, false);
// Config for legacy build.
const legacyConfig = makeConfig(isProduction, true);

const smp = new SpeedMeasurePlugin({
  // measure when environment variable `MEASURE` is set,
  disable: !process.env.MEASURE,
});

module.exports = // smp.wrap(
  process.env.LEGACY === 'only'
    ? legacyConfig
    : isProduction && legacyBuilds && process.env.LEGACY !== 'off'
      ? [mainConfig, legacyConfig]
      : mainConfig;
// );

/**
 * add a path segment to URL or path.
 */
function addPathSeg(path, seg) {
  if (/\/$/.test(path)) {
    return `${path}${seg}/`;
  } else {
    return `${path}/${seg}/`;
  }
}

/**
 * Make a regexp for selecting vendor modules.
 */
function vendorRegexp(...vendors) {
  return new RegExp(
    String.raw`[\\\/]node_modules[\\\/](?:${vendors.join('|')})[\\\/]`,
  );
}
